public class Main {
    public static void main(String[] args) {
//Когда применяется цикл while?
//        Этот цикл создан для того, чтобы выполнять свой блок кода в случае true в блоке условий.
//        Он выглядит как if, но если if выполняется один раз, while выполняется бесконечно,
//        пока условие корректно
// Он повторяет оператор или блок операторов до тех пор, пока значение его управляющего выражения истинно.
// Тело цикла будет выполняться до тех пор, пока условное выражение истинно.
// Когда условие становится ложным, управление передаётся строке кода, которая идёт после цикла
//        Цикл с предусловием
//Так как перед выполнением тела цикла мы всегда предварительно вычисляем логическое выражение
// (условие входа в цикл),
// то этот вид while часто называют циклом  с предусловием.
//        Выполняется следующим образом (шаги):
//Выполняется тело цикла (сразу после ключевого слова do).
//Вычисляем Логическое условие, следующее в скобках за while.
//Если логическое условие истинно, то переходим на шаг 1
//Если логическое условие ложно, то переходим к первому оператору за пределами цикла while.
//
//Два основных отличия от предыдущего вида цикла: тело цикла как минимум выполняется один раз и
// логическое условие проверяется после выполнения тела цикла.
// Поэтому этот вид цикла while называют циклом с постусловием.


//Для чего применяется метод toString**?**

//        Метод toString() – используется в Java для получения строкового объекта,
//        представляющего значение числового объекта, другими словами – преобразует число в строку.
//
//Если метод принимает в качестве аргумента простой тип данных, то возвращается
// строковый объект, представляющий значение простого типа данных.
//
//Если метод toString() в Java принимает два аргумента, то будет возвращено строковое
// представление первого аргумента в системе счисления по целочисленному основанию, указанному вторым аргументом.
//
//Синтаксис
//Все вариант метода приведены ниже:
//
//String toString()
//static String toString(int i)
//Параметры
//Подробная информация о параметрах:
//
//i – int, который будет преобразован и возвращён как строковый объект (String).
//Возвращаемое значение
//toString(): возвращает строковый объект, представляющий значение этого целого числа.
//toString(int i): возвращает строковый объект, представляющий заданное целое число.
//Пример
//public class Test{
//
//   public static void main(String args[]){
//      Integer x = 5;
//
//      System.out.println(x.toString());  // Преобразовать число x в строку
//      System.out.println(Integer.toString(12));  // Преобразовать int в string
//   }
//}
//Будет получен следующий результат:
//
//5
//12

//        Что такое toString в Java?
//Метод toString() – используется в Java для получения строкового объекта, представляющего
// значение числового объекта, другими словами – преобразует число в строку.
// Если метод принимает в качестве аргумента простой тип данных, то возвращается строковый объект,
// представляющий значение простого типа данных.

//        Метод toString в Java используется для предоставления ясной и достаточной
//        информации об объекте (Object) в удобном для человека виде.
//        Правильное переопределение метода toString может помочь в ведении журнала
//        работы и в отладке Java программы, предоставляя ценную и важную информацию.
//        Поскольку toString() определен в классе java.lang.Object и его реализация по
//        умолчанию не предоставляет много информации, всегда лучшей практикой является
//        переопределение данного метода в классе-потомке. По умолчанию реализация toString
//        создает вывод в виде:

//        /
///Поскольку все объекты Java наследуются от java.lang.Object, вам нужно переопределить
// toString() метод для получения желаемого строкового представления.
// В противном случае приведенная выше реализация по умолчанию toString()
// метод будет вызываться при попытке распечатать объект.

//Что такое область видимости?

//        Область видимости переменной — свойство, которое определяет,
//        можно ли использовать переменную из разных областей класса.
//        Это зависит от места, где переменная была объявлена.
//
//Если какая-то переменная объявляется в теле метода, в цикле
// или условной конструкции, она исчезает после завершения работы этого метода,
// цикла или ветки. Это же касается и аргументов методов:
// переменные-аргументы существуют только в момент выполнения метода.
// А значит, они не могут быть доступны из других блоков кода.
//При попытке использовать переменные за пределами цикла и скомпилировать код мы получим ошибку компиляции:
//Области видимости и модификаторы доступа
//Область видимости переменной, метода или класса – это их свойство быть доступными
// из тех или иных частей кода, т. е. различных областей программы.
// Область видимости может определяться как самим местом объявления идентификатора,
// так и применением к нему модификатора доступа. Переменные-поля и методы
// (не статические) объекта существуют только в период жизни этого объекта.
// При этом их область видимости регулируется модификаторами.
// Классы существуют всегда, к ним также применяются модификаторы доступа, но не все.
//Классы в Java содержат методы и поля – переменные класса. Методы имеют параметры,
// а внутри методов возможно определение локальных переменных.
// Требования к именам переменных – стандартные, как и в других языках программирования.
// Кроме того не допускается объявление переменных с одинаковыми именами.
// Так, например, следующий код будет считаться ошибочным.
//
//int n;
//{
//     int n; // нельзя
//}
//У каждой переменной есть область видимости, т.е. та область программы,
// в которой возможна работа с этой переменной. Таким образом у переменных
// с одинаковыми именами не должны пересекаться области видимости.
//
//В Java объявление локальных переменных возможно в любом месте метода.
// При этом областью видимости переменной будет тот блок, в котором она определена
// (под блоком подразумевается код, помещённый в фигурные скобки {}).
// под «видимостью переменных» подразумевают места в коде, где к этой переменной можно обратиться.
// К некоторым переменным можно обращаться отовсюду в программе, к другим только в пределах их класса,
// к третьим же только внутри одного метода.
//
//— Например, ты не можешь обратиться к переменной раньше, чем она объявлена.
//        1. Переменная, объявленная в методе, существует/видна с начала объявления до конца метода.
//
//2. Переменная, объявленная в блоке кода, существует до конца этого блока кода.
//
//3. Переменные — аргументы метода — существуют везде внутри метода.
//
//4. Переменные класса/объекта существуют все время жизни содержащего их объекта. Их видимость
// дополнительно регулируется специальными модификаторами доступа: public, private.
//
//5. Статические переменные классов существуют все время работы программы. Их видимость
// также определяется модификаторами доступа.
//        Переменная, которая объявляется внутри метода, доступна только в пределах этого метода -
//        ее так называемая область видимости ограничена данным методом, в котором она объявлена.
//        Это означает, что в другом методе можно объявить переменную с точно таким же име-нем без
//        какого-либо конфликта.
//        Переменная-счетчик, объявленная в цикле for, недоступна снаружи цикла -
//        ее область видимости ограничена блоком операторов цикла.
//## **Что происходит?**
//
//В конце каждого курса мы будем давать вам практическое задание, которое
// поможет оценить уровень и глубину ваших знаний в пройденных темах,
// а также поможет планомерно и мягко готовиться к будущему техническому собеседованию.
//
//Ниже вы найдете список вопросов для подготовки к техническому собеседованию
// на позицию Junior Java-разработчика. Список включает в себя пройденные вами
// темы на курсе, а также распространенные вопросы, которые чаще всего задают на технических интервью.
//
//В этот список на данном этапе мы включили вопросы только из первого курса, пройденного вами.
//
//Далее, от курса к курсу, список вопросов и задач будет пополняться.
//
//## Какие вопросы предлагаются для самопроверки?
//
//Ниже мы подготовили для вас список вопросов по первому курсу. Все эти вопросы
// вы можете использовать для проверки себя. Мы подобрали их основываясь на типовых вопросах,
// которые задаются чаще всего на техническом собеседовании.
//
//- **Список вопросов здесь**
//
//
//    | Номер вопроса | Вопрос |
//    | --- | --- |
//    | 1 | Дайте определение переменной. Перечислите типы переменных и хранимые в них данные |
//    | 2 | Какие условные операторы вы знаете? Дайте краткое определение каждому из них. |
//    | 3 | Какие циклы вы знаете, в чем их отличия? |
//    | 4 | Какие есть способы создания объекта String? Где он создается? |
//    | 5 | Как сравнить две строки в Java и/или отсортировать их? |
//    | 6 | Расскажите про String в Java |
//    | 7 | Когда применяется цикл while? |
//    | 8 | Методы каких типов бывают? Приведите примеры использования каждого типа. |
//    | 9 | Что такое массив? |
//    | 10 | Почему доступ по элементу в массиве происходит за O(1)? |
//    | 11 | Дайте определение классу в Java.  |
//    | 12 | Когда применяется ключевое слово this? |
//    | 13 | В чем разница между == и equals()? |
//    | 14 | Для чего применяется метод toString? |
//    | 15 | Какие методы называются геттерами? Что они делают? |
//    | 16 | Дайте определение сеттерам. Расскажите, для чего они нужны? |
//    | 17 | Что такое конструкторы? |
//    | 18 | Что такое сигнатура метода? |
//    | 19 | Какая функция у оператора return? |
//    | 20 | Что такое область видимости? |
//
//## **Зачем это нужно?**
//
//Промежуточная проверка знаний поможет вам понять, какие темы для вас остались непонятными
// и даст первый опыт устного ответа на технические вопросы в формате видеоинтервью.
//
//Такую практику мы рекомендуем проводить регулярно и самостоятельно, чтобы закреплять
// пройденный материал и постепенно начинать готовиться к техническому собеседованию.
// Мы составили вопросы таким образом, чтобы они были похожи на технические вопросы
// собеседований, но с учётом вашего актуального уровня знаний.
//
//Кроме этого, такая проверка помогает нам скорректировать программу с учетом ваших ответов.
//
//### **Как это работает?**
//
//Сегодня вам доступная первая часть проверки знаний - брифинг. Начиная с сегодняшнего
// дня у вас есть неделя. Через неделю куратор в канале Mattermost вывесит список,
// из которого вы узнаете номер билета, на который нужно записать ответы на вопросы.
//
//Обратите внимание, что ответить нужно именно на свой билет.
//
//Если вы ответите на вопросы из другого билета, такой ответ **не будет засчитан**.
//
//Ответы на вопросы нужно будет записать в **видео-формате** – это приближенный формат
// ответов на технические вопросы при трудоустройстве. Записывать само видео нужно с помощью сервиса Zoom.
//
//### **Какой дальнейший порядок действий?**
//
//- У вас есть 1 календарная неделя (7 дней) для того, чтобы подготовиться к устному
// видео-ответу на **3 вопроса** из данного списка. Какие именно это будут вопросы,
// неизвестно, поэтому вам нужно подготовиться по всем вопросам из списка.
//- Через неделю вы получите билет (как в институте на экзамене), в котором будут 3
// технических вопроса по теории и одна практическая задача.
//
//### **Что должно получиться в итоге?**
//
//- Представьтесь, скажите, как вас зовут, назовите номер билета
//- Отдельным видео запишите ответы на теоретические вопросы из билета
//- Отдельным видео запишите ход решения задачи из билета
//- Пришлите ссылку на PR решенного задания в GitHub.
//
//Во время проверки наставник будет оценивать ваш ответ и глубину знаний. В данном
// задании наставники будут обращать внимание на ваш внешний вид и качество звука,
// поэтому перед записью обязательно проверьте технические настройки и подготовьтесь.
// Фон на видео и независящие от ученика обстоятельства (например, ремонт у соседей,
// шум с улицы, время суток и тд) в задании не оцениваются.
//
//<aside>
//😉 Это ваш первый опыт устных ответов по типу собеседования, поэтому **это нормально**,
// если у вас **не получится с первого раза записать видео**. Попрактикуйтесь в
// формулировании лаконичных ответов на вопросы и пришлите тот вариант, который
// удовлетворит вашим внутренним критериям.
//
//</aside>
//
//## Как готовиться?
//
//Для того, чтобы ваша подготовка к заданию была эффективнее и прозрачнее, мы разработали
// телеграм-бота, который помогает тренироваться в записи
//        ### Устные ответы на вопросы из билета
//
//При ответах на технические вопросы сначала проговорите сам вопрос, на
// который собираетесь отвечать, а после этого озвучьте ответ.
//
//Перед записью прорепетируйте ответ на вопрос, вспомните и приведите
// наглядные примеры, которые раскрывают ваше объяснение.
//
//Будет плюсом, но необязательно, если в качестве демонстрации знаний вы напишите
// короткий код, иллюстрирующий ваш пример или дополняющий объяснение.
//
//Если вы забыли ответ на вопрос, то так и скажите и попробуйте объяснить понятие
// так, как понимаете его.
//- Задача
//
//    Напишите метод, который возводит число в квадрат.

        toSquare(10);
        System.out.println(toSquare(10));
    }

    public static int toSquare(int number) {
        return number * number;
//        System.out.println(square);
    }
}